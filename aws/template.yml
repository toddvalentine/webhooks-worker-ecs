AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a web hook test service worker
# TODO: set up dead letter queue and associated topic/alerts
# Input Paramters
Parameters:
  ApplicationName:
    Type: String
    Default: "webhooks-sqs-worker"
  EnvironmentName:
    Type: String
    Description: Staging, Production
  ServiceName:
    Type: String
    Default: webhooks-sqs-worker
    Description: Name of the ECS service
  AppImageUrl:
    Type: String
    Default: ''
    Description: The url of a docker image that contains the application process that will handle the traffic for this service 
  AppPort:
    Type: Number
    Default: 9000
    Description: Port exposed by the proxy container that receieves traffic from the proxy
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run  
  Email:
    Description: 'Optional email address that will receive alerts.'
    Type: String
    Default: ''
  TopicName:
    Description: 'ServiceName Alert topic (ex. AutoScalingNotification). see docs/alerts.md'  
    Type: String 
  HttpsEndpoint:
    Description: 'Optional HTTPS endpoint that will receive alerts via POST requests (e.g., a marbot.io endpoint for incident management in Slack).'
    Type: String
    Default: ''

Conditions:  
  HasEmail: !Not [!Equals [!Ref Email, '']]
  HasHttpsEndpoint: !Not [!Equals [!Ref HttpsEndpoint, '']]       

Mappings: 
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'  
    PrivateOne:
      CIDR: '10.0.2.0/24'
    PrivateTwo:
      CIDR: '10.0.3.0/24'    

Resources: 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']      
  
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Fn::Select:
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}   
      VpcId: !Ref VPC      
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-PublicSubnet1
  
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Fn::Select:
        - 1
        - Fn::GetAZs: {Ref: 'AWS::Region'}   
      VpcId: !Ref VPC      
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-PublicSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway 
  
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment 
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC 
      
  PublicRoute:
    Type: AWS::EC2::Route 
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0' 
      GatewayId: !Ref InternetGateway  

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable    

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable     
      
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: "" 
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-PrivateSubnetOne

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: "" 
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-PrivateSubnetTwo  
          
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetOne

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-PrivateRouteTable

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  AppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetOne

  AppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetTwo       

  #############################################################################
  #                                                                           #
  #                           Security Groups                                 #
  #                                                                           #
  #############################################################################

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Access to fargate containers
      VpcId: !Ref VPC   

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group 
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup

  #############################################################################
  #                                                                           #
  #                                SNS                                        #
  #                                                                           #
  #############################################################################
  Topic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName : !Sub ${ApplicationName}-${EnvironmentName}-${TopicName}
      Tags: 
      - Key: Name
        Value: !Sub ${ApplicationName}-${EnvironmentName}-${TopicName}-Topic 

  TopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: Id1
        Version: '2012-10-17'
        Statement:
        - Sid: Sid1
          Effect: Allow
          Principal:
            Service:
            - 'sqs.amazonaws.com' 
          Action: 'sns:Publish'
          Resource: !Ref Topic
        - Sid: Sid2
          Effect: Allow
          Principal:
            AWS: '*' # Allow CloudWatch Alarms, ElastiCache Notifications, Elastic Beanstalk Notifications, Auto Scaling Notification
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:SourceOwner': !Ref 'AWS::AccountId'
      Topics:
      - !Ref Topic

  EmailSubscription:
    Condition: HasEmail
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref Email
      Protocol: email
      TopicArn: !Ref Topic

  HttpsEndpointSubscription:
    Condition: HasHttpsEndpoint
    Type: 'AWS::SNS::Subscription'
    Properties:
      DeliveryPolicy:
        healthyRetryPolicy:
          minDelayTarget: 1
          maxDelayTarget: 60
          numRetries: 100
          numNoDelayRetries: 0
          backoffFunction: exponential
        throttlePolicy:
          maxReceivesPerSecond: 1
      Endpoint: !Ref HttpsEndpoint
      Protocol: https
      TopicArn: !Ref Topic

  #############################################################################
  #                                                                           #
  #                                SQS                                        #
  #                                                                           #
  #############################################################################   
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ApplicationName}-${EnvironmentName}-webhooks-sqs-queue"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-Queue   
          
  QueueTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
        - !Ref Topic
      AlarmDescription: 'Queue contains messages older than 10 minutes, messages are not consumed'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: QueueName
        Value: !GetAtt 'Queue.QueueName'
      EvaluationPeriods: 1
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: 'AWS/SQS'
      OKActions:
        - !Ref Topic
      Period: 60
      Statistic: Maximum
      Threshold: 600
      TreatMissingData: notBreaching        

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ApplicationName}-${EnvironmentName}-webhooks-sqs-dlq" 
      MessageRetentionPeriod: 1209600
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-DLQ 
          
  DeadLetterQueueTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
        - !Ref Topic
      AlarmDescription: 'Dead letter queue contains messages, message processing failed'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: QueueName
        Value: !GetAtt 'DeadLetterQueue.QueueName'
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: 'AWS/SQS'
      OKActions:
        - !Ref Topic 
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching        
    
  #############################################################################
  #                                                                           #
  #                                ECS                                        #
  #                                                                           #
  #############################################################################
  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:CreateLogGroup'
                - 'logs:DescribeLogStreams'

              Resource: '*'  
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-ECSTaskExecutionRole           
              
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole'] 
      Policies:
        - PolicyName: AmazonECSTaskRolePolicy
          PolicyDocument:
            Statement: 
            - Effect: Allow
              Action:
                - 'sqs:*'
              Resource:  !GetAtt Queue.Arn  
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-ECSTaskRole             
       
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition 
    Properties: 
      Family: !Ref 'ServiceName'
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE 
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn' 
      TaskRoleArn: !GetAtt 'ECSTaskRole.Arn'       
      ContainerDefinitions:           
        - Name: 'app'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'AppImageUrl'
          Environment:
            - Name: "QUEUE_NAME"
              Value: !GetAtt Queue.QueueName
            - Name: "QUEUE_OWNER_ID"
              Value: !Ref "AWS::AccountId"  
          PortMappings: 
            - ContainerPort: !Ref 'AppPort' 
          LogConfiguration:
            LogDriver: 'awslogs'  
            Options:
              awslogs-group: 'webhooks-sqs'
              awslogs-region: 'us-east-1' 
              awslogs-create-group: 'true'   
              awslogs-stream-prefix: 'webhooks-sqs-worker'  
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-Taskdefinition                                 

  Service: 
    Type: AWS::ECS::Service 
    Properties: 
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE 
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'    
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref FargateContainerSecurityGroup    
          Subnets:
            - !Ref PublicSubnetOne                        
            - !Ref PublicSubnetTwo  
      TaskDefinition:  !Ref TaskDefinition
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${EnvironmentName}-ECSService   

  #############################################################################
  #                                                                           #
  #                                Alarms                                     #
  #                                                                           #
  #############################################################################  
  ServiceFailedNotification:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
        - 'aws.ec2'
        'detail-type':
        - 'ECS Service Action'
        resources:
        - !Ref Service
        detail:
          eventType:
          - ERROR
          - WARN
      State: ENABLED
      Targets:
      - Arn: !Ref Topic
        Id: rule

  CPUUtilizationTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      AlarmActions: 
      - !Ref Topic

  CPUUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is running out of CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 60
      AlarmActions:
      - !Ref Topic

  CPUUtilizationLowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is wasting CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 30
      AlarmActions:
      - !Ref Topic           

Outputs:
  Queue:
    Value:
      Fn::Join:
        - " "
        - - 'ARN:'
          - Fn::GetAtt:
              - Queue
              - Arn
          - 'URL:'
          - Ref: Queue     
  DeadLetterQueue:
    Value:
      Fn::Join:
        - " "
        - - 'ARN:'
          - Fn::GetAtt:
              - DeadLetterQueue
              - Arn
          - 'URL:'
          - Ref: DeadLetterQueue                 
      
                